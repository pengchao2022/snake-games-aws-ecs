name: Deploy Snake Game to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  TF_WORKING_DIR: './terraform'

jobs:
  terraform:
    name: Terraform Plan and Apply
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform init

    - name: Terraform Validate
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform validate

    - name: Terraform Plan
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform plan -var="db_password=${{ secrets.DB_PASSWORD }}"

    - name: Terraform Apply
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform apply -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}"

    - name: Get Terraform Outputs
      id: tf-outputs
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        
        # 获取所有必要的输出
        RDS_ENDPOINT=$(terraform output -raw rds_endpoint)
        DATABASE_URL_SSM=$(terraform output -raw database_url_ssm_parameter)
        LOAD_BALANCER_DNS=$(terraform output -raw load_balancer_dns)
        ECS_CLUSTER=$(terraform output -raw ecs_cluster_name)
        PRIVATE_SUBNETS=$(terraform output -json private_subnet_ids | jq -r '. | join(",")')
        
        echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
        echo "database_url_ssm=$DATABASE_URL_SSM" >> $GITHUB_OUTPUT
        echo "load_balancer_dns=$LOAD_BALANCER_DNS" >> $GITHUB_OUTPUT
        echo "ecs_cluster=$ECS_CLUSTER" >> $GITHUB_OUTPUT
        echo "private_subnets=$PRIVATE_SUBNETS" >> $GITHUB_OUTPUT

  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: terraform
    environment: production

    env:
      ECR_REPOSITORY: snake-game

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd src
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Get AWS Resources Info
      id: aws-resources
      run: |
        # 获取ECS执行角色
        EXECUTION_ROLE_ARN=$(aws iam list-roles --query "Roles[?RoleName=='snake-game-production-ecs-task-execution-role'].Arn" --output text)
        
        # 获取ECS任务角色
        TASK_ROLE_ARN=$(aws iam list-roles --query "Roles[?RoleName=='snake-game-production-ecs-task-role'].Arn" --output text)
        
        # 获取安全组
        SECURITY_GROUP=$(aws ec2 describe-security-groups \
          --filters "Name=group-name,Values=snake-game-production-ecs-sg" \
          --query "SecurityGroups[0].GroupId" \
          --output text)
        
        # 获取目标组
        TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups \
          --query "TargetGroups[?TargetGroupName=='snake-game-production-tg'].TargetGroupArn" \
          --output text)
        
        echo "execution_role_arn=$EXECUTION_ROLE_ARN" >> $GITHUB_OUTPUT
        echo "task_role_arn=$TASK_ROLE_ARN" >> $GITHUB_OUTPUT
        echo "security_group=$SECURITY_GROUP" >> $GITHUB_OUTPUT
        echo "target_group_arn=$TARGET_GROUP_ARN" >> $GITHUB_OUTPUT

    - name: Create ECS task definition
      run: |
        cat > task-definition.json << EOF
        {
          "family": "snake-game-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "${{ steps.aws-resources.outputs.execution_role_arn }}",
          "taskRoleArn": "${{ steps.aws-resources.outputs.task_role_arn }}",
          "containerDefinitions": [
            {
              "name": "snake-game",
              "image": "${{ steps.build-image.outputs.image }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 5000,
                  "hostPort": 5000,
                  "protocol": "tcp"
                }
              ],
              "environment": [
                {
                  "name": "ENVIRONMENT",
                  "value": "production"
                },
                {
                  "name": "AWS_REGION",
                  "value": "${{ env.AWS_REGION }}"
                }
              ],
              "secrets": [
                {
                  "name": "DATABASE_URL",
                  "valueFrom": "${{ needs.terraform.outputs.database_url_ssm }}"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/snake-game-production",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF

    - name: Register ECS task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://task-definition.json

    - name: Create ECS service
      run: |
        aws ecs create-service \
          --cluster ${{ needs.terraform.outputs.ecs_cluster }} \
          --service-name snake-game-service \
          --task-definition snake-game-task \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ needs.terraform.outputs.private_subnets }}],securityGroups=[${{ steps.aws-resources.outputs.security_group }}],assignPublicIp=DISABLED}" \
          --load-balancers "targetGroupArn=${{ steps.aws-resources.outputs.target_group_arn }},containerName=snake-game,containerPort=5000"

    - name: Wait for service stability
      run: |
        aws ecs wait services-stable \
          --cluster ${{ needs.terraform.outputs.ecs_cluster }} \
          --services snake-game-service

    - name: Health Check
      run: |
        echo "Waiting for application to start..."
        sleep 90
        
        LOAD_BALANCER_DNS="${{ needs.terraform.outputs.load_balancer_dns }}"
        echo "Testing application at: http://$LOAD_BALANCER_DNS/health"
        
        # 重试机制
        for i in {1..12}; do
          if curl -f -s http://$LOAD_BALANCER_DNS/health; then
            echo "✅ Health check passed!"
            break
          else
            echo "⏳ Health check attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
          
          if [ $i -eq 12 ]; then
            echo "❌ Health check failed after 12 attempts"
            # 获取服务状态用于调试
            aws ecs describe-services \
              --cluster ${{ needs.terraform.outputs.ecs_cluster }} \
              --services snake-game-service \
              --query 'services[0]'
            exit 1
          fi
        done

    - name: Deployment Summary
      run: |
        echo "🎉 Deployment Completed Successfully!"
        echo "========================================"
        echo "🌐 Application URL: http://${{ needs.terraform.outputs.load_balancer_dns }}"
        echo "🛠️  Health Check: http://${{ needs.terraform.outputs.load_balancer_dns }}/health"
        echo "🗄️  Database: ${{ needs.terraform.outputs.rds_endpoint }}"
        echo "🐳 ECR Image: ${{ steps.build-image.outputs.image }}"
        echo "⚓ ECS Cluster: ${{ needs.terraform.outputs.ecs_cluster }}"
        echo "🔧 ECS Service: snake-game-service"