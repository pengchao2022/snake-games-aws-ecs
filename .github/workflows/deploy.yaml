name: Deploy Snake Game to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  TF_WORKING_DIR: './terraform'
  APP_DIR: './app'
  ECR_REPO: 'snake-game-repo'
  ECS_CLUSTER: 'snake-game-cluster'
  ECS_SERVICE: 'snake-game-service'

jobs:
  terraform:
    name: Terraform Apply Infrastructure
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    - name: Terraform Apply
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform apply -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}"

  deploy-app:
    name: Build and Deploy Flask App to ECS
    runs-on: ubuntu-latest
    needs: terraform
    environment: production

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ✅ 直接重新 init backend，从 S3 拉取 state
    - name: Terraform Init (Load Backend)
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init -reconfigure

    - name: Get RDS Connection Info
      id: get_rds
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        RDS_ENDPOINT=$(terraform output -raw rds_endpoint)
        echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
        echo "✅ RDS Endpoint: $RDS_ENDPOINT"

    - name: Login to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, Tag, and Push Docker Image
      working-directory: ${{ env.APP_DIR }}
      env:
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        ECR_REPO: ${{ env.ECR_REPO }}
      run: |
        IMAGE_TAG=${{ github.sha }}
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Update ECS Service
      run: |
        echo "Updating ECS service with new image..."
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
        echo "✅ ECS service updated successfully"

    - name: Deployment Info
      run: |
        echo "✅ Deployment complete"
        echo "ECS Cluster: ${{ env.ECS_CLUSTER }}"
        echo "ECS Service: ${{ env.ECS_SERVICE }}"
        echo "ECR Image: ${{ env.IMAGE_URI }}"
        echo "RDS Endpoint: ${{ env.RDS_ENDPOINT }}"
