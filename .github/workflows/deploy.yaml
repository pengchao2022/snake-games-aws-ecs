name: Deploy Snake Game to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  TF_WORKING_DIR: './terraform'
  ECR_REPO: 'snake-game-repo'
  ECS_CLUSTER: 'snake-game-cluster'
  ECS_SERVICE: 'snake-game-service'

jobs:
  terraform:
    name: Terraform Apply Infrastructure
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    - name: Terraform Apply
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform apply -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}"

  deploy-app:
    name: Build and Deploy Flask App to ECS
    runs-on: ubuntu-latest
    needs: terraform
    environment: production

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init (Load Backend)
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init -reconfigure

    - name: Get RDS Connection Info
      id: get_rds
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        RDS_ENDPOINT=$(terraform output -raw rds_endpoint)
        echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
        echo "✅ RDS Endpoint: $RDS_ENDPOINT"

    - name: Login to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2

    - name: Print repo root (for debug)
      run: |
        echo "---- repo root listing ----"
        ls -la
        echo "---- top-level entries ----"
        for d in ./*; do echo "$d"; done
        echo "---------------------------"

    - name: Build, Tag, and Push Docker Image
      env:
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        ECR_REPO: ${{ env.ECR_REPO }}
      run: |
        set -euo pipefail

        # 查找 Dockerfile
        CANDIDATES="./app ./src ."
        DOCKERFILE_PATH=""
        for d in $CANDIDATES; do
          if [ -f "$d/Dockerfile" ]; then
            DOCKERFILE_PATH="$d/Dockerfile"
            break
          fi
        done

        if [ -z "$DOCKERFILE_PATH" ]; then
          FOUND=$(find . -maxdepth 4 -type f -name Dockerfile | head -n 1 || true)
          if [ -n "$FOUND" ]; then
            DOCKERFILE_PATH="$FOUND"
          fi
        fi

        if [ -z "$DOCKERFILE_PATH" ]; then
          echo "❌ No Dockerfile found!"
          exit 1
        fi

        BUILD_DIR=$(dirname "$DOCKERFILE_PATH")
        echo "✅ Dockerfile found: $DOCKERFILE_PATH"
        echo "Using build dir: $BUILD_DIR"

        IMAGE_TAG=${GITHUB_SHA}
        ECR_IMAGE_SHA="${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}"
        ECR_IMAGE_LATEST="${ECR_REGISTRY}/${ECR_REPO}:latest"

        echo "🛠 Building image: $ECR_IMAGE_SHA"
        docker build -t "$ECR_IMAGE_SHA" "$BUILD_DIR"

        echo "🏷 Tagging image as latest: $ECR_IMAGE_LATEST"
        docker tag "$ECR_IMAGE_SHA" "$ECR_IMAGE_LATEST"

        echo "📤 Pushing both tags to ECR..."
        docker push "$ECR_IMAGE_SHA"
        docker push "$ECR_IMAGE_LATEST"

        echo "✅ Image pushed: $ECR_IMAGE_SHA and latest"
        echo "IMAGE_URI=$ECR_IMAGE_LATEST" >> $GITHUB_ENV

    - name: Update ECS Service (force new deployment)
      run: |
        echo "Triggering ECS service update (force new deployment)..."
        aws ecs update-service \
          --cluster "${{ env.ECS_CLUSTER }}" \
          --service "${{ env.ECS_SERVICE }}" \
          --force-new-deployment \
          --region "${{ env.AWS_REGION }}"
        echo "✅ update-service called"

    - name: Wait for ECS Deployment to Stabilize
      run: |
        echo "Waiting for ECS service to stabilize..."
        aws ecs wait services-stable \
          --cluster "${{ env.ECS_CLUSTER }}" \
          --services "${{ env.ECS_SERVICE }}" \
          --region "${{ env.AWS_REGION }}"
        echo "✅ ECS service is stable"

    - name: Deployment Info
      run: |
        echo "✅ Deployment complete"
        echo "ECS Cluster: ${{ env.ECS_CLUSTER }}"
        echo "ECS Service: ${{ env.ECS_SERVICE }}"
        echo "ECR Image: ${{ env.IMAGE_URI }}"
        echo "RDS Endpoint: ${{ env.RDS_ENDPOINT }}"
