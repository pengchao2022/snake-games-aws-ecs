name: Deploy Snake Game to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}"

  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: terraform
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      run: |
        cd src
        docker build -t snake-game:latest .
        docker tag snake-game:latest ${{ steps.login-ecr.outputs.registry }}/snake-game:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/snake-game:latest

    - name: Update task definition with new image
      id: update-task-def
      run: |
        # 使用现有的 task-definition.json，只更新镜像
        jq '.containerDefinitions[0].image = "${{ steps.login-ecr.outputs.registry }}/snake-game:latest"' task-definition.json > updated-task-definition.json
        echo "Task definition updated with new image"

    - name: Register ECS task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://updated-task-definition.json

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster snake-game-production-cluster \
          --service snake-game-service \
          --task-definition snake-game-task \
          --force-new-deployment

    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        aws ecs wait services-stable \
          --cluster snake-game-production-cluster \
          --services snake-game-service

    - name: Health check
      run: |
        # 获取负载均衡器DNS
        LOAD_BALANCER_DNS=$(aws elbv2 describe-load-balancers \
          --query 'LoadBalancers[?LoadBalancerName==`snake-game-production-alb`].DNSName' \
          --output text)
        
        echo "Application URL: http://$LOAD_BALANCER_DNS"
        echo "Testing health endpoint..."
        
        # 健康检查
        for i in {1..10}; do
          if curl -f -s http://$LOAD_BALANCER_DNS/health > /dev/null; then
            echo "✅ Health check passed!"
            break
          else
            echo "⏳ Health check attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done

    - name: Deployment Summary
      run: |
        LOAD_BALANCER_DNS=$(aws elbv2 describe-load-balancers \
          --query 'LoadBalancers[?LoadBalancerName==`snake-game-production-alb`].DNSName' \
          --output text)
        
        echo "🎉 Deployment Completed Successfully!"
        echo "========================================"
        echo "🌐 Application URL: http://$LOAD_BALANCER_DNS"
        echo "🛠️  Health Check: http://$LOAD_BALANCER_DNS/health"
        echo "🐳 ECR Image: ${{ steps.login-ecr.outputs.registry }}/snake-game:latest"
        echo "⚓ ECS Cluster: snake-game-production-cluster"
        echo "🔧 ECS Service: snake-game-service"