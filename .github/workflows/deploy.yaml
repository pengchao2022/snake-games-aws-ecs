name: Deploy Snake Game to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}"

  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: terraform
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      run: |
        cd src
        docker build -t snake-game:latest .
        docker tag snake-game:latest ${{ steps.login-ecr.outputs.registry }}/snake-game:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/snake-game:latest

    - name: Get SSM Parameter for Database URL
      id: ssm-param
      run: |
        DATABASE_URL=$(aws ssm get-parameter \
          --name "/snake-game/production/database-url" \
          --with-decryption \
          --query "Parameter.Value" \
          --output text)
        echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV

    - name: Create ECS task definition
      run: |
        # 直接从环境变量获取数据库URL，不使用SSM secrets
        cat > task-definition.json << EOF
        {
          "family": "snake-game-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/ecsTaskExecutionRole",
          "containerDefinitions": [
            {
              "name": "snake-game",
              "image": "${{ steps.login-ecr.outputs.registry }}/snake-game:latest",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 5000,
                  "hostPort": 5000,
                  "protocol": "tcp"
                }
              ],
              "environment": [
                {
                  "name": "DATABASE_URL",
                  "value": "${{ env.DATABASE_URL }}"
                },
                {
                  "name": "ENVIRONMENT",
                  "value": "production"
                },
                {
                  "name": "AWS_REGION",
                  "value": "${{ env.AWS_REGION }}"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/snake-game-production",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF

    - name: Register ECS task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://task-definition.json

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster snake-game-production-cluster \
          --service snake-game-service \
          --task-definition snake-game-task \
          --force-new-deployment

    - name: Wait for deployment
      run: |
        sleep 30
        aws ecs wait services-stable \
          --cluster snake-game-production-cluster \
          --services snake-game-service

    - name: Health check
      run: |
        # 获取负载均衡器DNS
        LOAD_BALANCER_DNS=$(aws elbv2 describe-load-balancers \
          --query 'LoadBalancers[?LoadBalancerName==`snake-game-production-alb`].DNSName' \
          --output text)
        
        echo "Application URL: http://$LOAD_BALANCER_DNS"
        
        # 健康检查
        for i in {1..30}; do
          if curl -f -s http://$LOAD_BALANCER_DNS/health; then
            echo "✅ Application is healthy!"
            break
          fi
          echo "⏳ Waiting for application to start... ($i/30)"
          sleep 10
        done