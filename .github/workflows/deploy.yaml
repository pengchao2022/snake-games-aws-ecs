name: Deploy Snake Game to AWS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  TF_WORKING_DIR: './terraform'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform init

    - name: Terraform Format Check
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform fmt -check

    - name: Terraform Validate
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform plan -var="db_password=${{ secrets.DB_PASSWORD }}" -out=tfplan

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.TF_WORKING_DIR }}/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: production
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Init
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform init

    - name: Terraform Apply
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform apply -auto-approve tfplan

    - name: Save Terraform Outputs
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform output -json > ../terraform-outputs.json
        echo "Terraform outputs saved"

    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: terraform-outputs.json

  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    env:
      ECR_REPOSITORY: snake-game
      ECS_SERVICE: snake-game-service
      ECS_CLUSTER: snake-game-cluster
      ECS_TASK_DEFINITION: snake-game-task

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Terraform Outputs
      uses: actions/download-artifact@v4
      with:
        name: terraform-outputs
        path: ./

    - name: Parse Terraform Outputs
      id: tf-outputs
      run: |
        # 使用 jq 解析 terraform 输出，避免使用 terraform 命令
        EXECUTION_ROLE_ARN=$(jq -r '.execution_role_arn.value' terraform-outputs.json 2>/dev/null || echo "")
        TASK_ROLE_ARN=$(jq -r '.task_role_arn.value' terraform-outputs.json 2>/dev/null || echo "")
        DATABASE_URL_SSM=$(jq -r '.database_url_ssm_parameter.value' terraform-outputs.json)
        CLOUDWATCH_GROUP=$(jq -r '.ecs_cluster_name.value' terraform-outputs.json | sed 's/-cluster$//')
        LOAD_BALANCER_DNS=$(jq -r '.load_balancer_dns.value' terraform-outputs.json)
        PRIVATE_SUBNET_IDS=$(jq -r '.private_subnet_ids.value | join(",")' terraform-outputs.json)
        
        echo "execution_role_arn=$EXECUTION_ROLE_ARN" >> $GITHUB_OUTPUT
        echo "task_role_arn=$TASK_ROLE_ARN" >> $GITHUB_OUTPUT
        echo "database_url_ssm=$DATABASE_URL_SSM" >> $GITHUB_OUTPUT
        echo "cloudwatch_group=/ecs/$CLOUDWATCH_GROUP" >> $GITHUB_OUTPUT
        echo "load_balancer_dns=$LOAD_BALANCER_DNS" >> $GITHUB_OUTPUT
        echo "private_subnet_ids=$PRIVATE_SUBNET_IDS" >> $GITHUB_OUTPUT

        # 如果无法从输出获取角色ARN，使用AWS CLI查询
        if [ -z "$EXECUTION_ROLE_ARN" ]; then
          EXECUTION_ROLE_ARN=$(aws iam list-roles --query "Roles[?RoleName=='snake-game-production-ecs-task-execution-role'].Arn" --output text)
          echo "execution_role_arn_fallback=$EXECUTION_ROLE_ARN" >> $GITHUB_OUTPUT
        fi
        
        if [ -z "$TASK_ROLE_ARN" ]; then
          TASK_ROLE_ARN=$(aws iam list-roles --query "Roles[?RoleName=='snake-game-production-ecs-task-role'].Arn" --output text)
          echo "task_role_arn_fallback=$TASK_ROLE_ARN" >> $GITHUB_OUTPUT
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd src
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create task definition
      id: task-def
      run: |
        # 使用回退值如果主要值不存在
        EXECUTION_ROLE=${{
          steps.tf-outputs.outputs.execution_role_arn != '' && 
          steps.tf-outputs.outputs.execution_role_arn || 
          steps.tf-outputs.outputs.execution_role_arn_fallback
        }}
        
        TASK_ROLE=${{
          steps.tf-outputs.outputs.task_role_arn != '' && 
          steps.tf-outputs.outputs.task_role_arn || 
          steps.tf-outputs.outputs.task_role_arn_fallback
        }}

        cat > task-definition.json << EOF
        {
          "family": "$ECS_TASK_DEFINITION",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "$EXECUTION_ROLE",
          "taskRoleArn": "$TASK_ROLE",
          "containerDefinitions": [
            {
              "name": "snake-game",
              "image": "${{ steps.build-image.outputs.image }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 5000,
                  "hostPort": 5000,
                  "protocol": "tcp"
                }
              ],
              "environment": [
                {
                  "name": "ENVIRONMENT",
                  "value": "production"
                },
                {
                  "name": "AWS_REGION",
                  "value": "${{ env.AWS_REGION }}"
                }
              ],
              "secrets": [
                {
                  "name": "DATABASE_URL",
                  "valueFrom": "${{ steps.tf-outputs.outputs.database_url_ssm }}"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "${{ steps.tf-outputs.outputs.cloudwatch_group }}",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF

        echo "Task definition created"

    - name: Register ECS task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://task-definition.json

    - name: Get ECS Security Group
      id: get-sg
      run: |
        SECURITY_GROUP=$(aws ec2 describe-security-groups \
          --filters "Name=group-name,Values=snake-game-production-ecs-sg" \
          --query "SecurityGroups[0].GroupId" \
          --output text)
        echo "security_group=$SECURITY_GROUP" >> $GITHUB_OUTPUT

    - name: Get ALB Target Group
      id: get-tg
      run: |
        TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups \
          --query "TargetGroups[?TargetGroupName=='snake-game-production-tg'].TargetGroupArn" \
          --output text)
        echo "target_group_arn=$TARGET_GROUP_ARN" >> $GITHUB_OUTPUT

    - name: Deploy to ECS service
      run: |
        # 检查服务是否存在
        if aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].status' --output text | grep -q "ACTIVE"; then
          echo "Updating existing service"
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $ECS_TASK_DEFINITION \
            --force-new-deployment
        else
          echo "Creating new service"
          aws ecs create-service \
            --cluster $ECS_CLUSTER \
            --service-name $ECS_SERVICE \
            --task-definition $ECS_TASK_DEFINITION \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.tf-outputs.outputs.private_subnet_ids }}],securityGroups=[${{ steps.get-sg.outputs.security_group }}],assignPublicIp=DISABLED}" \
            --load-balancers "targetGroupArn=${{ steps.get-tg.outputs.target_group_arn }},containerName=snake-game,containerPort=5000"
        fi

    - name: Wait for service stability
      run: |
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE

    - name: Health Check
      run: |
        sleep 60
        LOAD_BALANCER_DNS="${{ steps.tf-outputs.outputs.load_balancer_dns }}"
        
        for i in {1..10}; do
          if curl -f http://$LOAD_BALANCER_DNS/health; then
            echo "Health check passed!"
            break
          else
            echo "Health check attempt $i failed"
            sleep 15
          fi
        done

    - name: Deployment Summary
      run: |
        echo "🚀 Deployment Completed Successfully!"
        echo "=========================================="
        echo "🌐 Application URL: http://${{ steps.tf-outputs.outputs.load_balancer_dns }}"
        echo "🛠️  Health Check: http://${{ steps.tf-outputs.outputs.load_balancer_dns }}/health"
        echo "🐳 ECR Image: ${{ steps.build-image.outputs.image }}"
        echo "⚓ ECS Cluster: $ECS_CLUSTER"
        echo "🔧 ECS Service: $ECS_SERVICE"