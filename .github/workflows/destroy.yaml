name: Destroy Snake Game Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure destruction'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  TF_WORKING_DIR: './terraform'

jobs:
  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Check destruction confirmation
      if: github.event.inputs.confirm_destroy != 'DESTROY'
      run: |
        echo "‚ùå Destruction not confirmed. Please type 'DESTROY' to confirm."
        exit 1

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform init

    - name: Check ECS service status
      id: check-ecs
      run: |
        ENVIRONMENT=${{ github.event.inputs.environment }}
        CLUSTER_NAME="snake-game-${ENVIRONMENT}-cluster"
        SERVICE_NAME="snake-game-${ENVIRONMENT}-service"
        
        echo "Checking if ECS service exists: $SERVICE_NAME in cluster: $CLUSTER_NAME"
        
        # Ê£ÄÊü•ÈõÜÁæ§ÊòØÂê¶Â≠òÂú®
        if aws ecs describe-clusters --clusters $CLUSTER_NAME --query 'clusters[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
          echo "ECS cluster exists: $CLUSTER_NAME"
          echo "cluster_exists=true" >> $GITHUB_OUTPUT
          
          # Ê£ÄÊü•ÊúçÂä°ÊòØÂê¶Â≠òÂú®
          if aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
            echo "ECS service exists: $SERVICE_NAME"
            echo "service_exists=true" >> $GITHUB_OUTPUT
          else
            echo "ECS service does not exist: $SERVICE_NAME"
            echo "service_exists=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "ECS cluster does not exist: $CLUSTER_NAME"
          echo "cluster_exists=false" >> $GITHUB_OUTPUT
          echo "service_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Stop ECS services
      if: steps.check-ecs.outputs.service_exists == 'true'
      run: |
        ENVIRONMENT=${{ github.event.inputs.environment }}
        CLUSTER_NAME="snake-game-${ENVIRONMENT}-cluster"
        SERVICE_NAME="snake-game-${ENVIRONMENT}-service"
        
        echo "Stopping ECS service: $SERVICE_NAME"
        
        # ËÆæÁΩÆÊúçÂä°ÊúüÊúõÊï∞Èáè‰∏∫0
        aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --desired-count 0
        
        # Á≠âÂæÖÊúçÂä°ÂÅúÊ≠¢Ôºå‰ΩÜËÆæÁΩÆË∂ÖÊó∂
        echo "Waiting for service to become inactive (with timeout)..."
        timeout 300 aws ecs wait services-inactive --cluster $CLUSTER_NAME --services $SERVICE_NAME
        
        # Âà†Èô§ÊúçÂä°
        aws ecs delete-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force
        echo "ECS service deleted: $SERVICE_NAME"

    - name: Delete ECS task definitions
      if: steps.check-ecs.outputs.cluster_exists == 'true'
      run: |
        ENVIRONMENT=${{ github.event.inputs.environment }}
        TASK_FAMILY="snake-game-${ENVIRONMENT}-task"
        
        echo "Checking for task definitions with family: $TASK_FAMILY"
        
        # Ëé∑ÂèñÊâÄÊúâËØ•familyÁöÑ‰ªªÂä°ÂÆö‰πâ
        TASK_DEFS=$(aws ecs list-task-definitions --family-prefix $TASK_FAMILY --query 'taskDefinitionArns' --output text 2>/dev/null || echo "")
        
        if [ -n "$TASK_DEFS" ]; then
          echo "Deregistering task definitions for family: $TASK_FAMILY"
          for TASK_DEF in $TASK_DEFS; do
            echo "Deregistering: $TASK_DEF"
            aws ecs deregister-task-definition --task-definition $TASK_DEF
          done
          echo "Task definitions deregistered"
        else
          echo "No task definitions found for family: $TASK_FAMILY"
        fi

    - name: Terraform Destroy
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        echo "Starting Terraform destroy..."
        terraform destroy -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}"
        echo "Terraform destroy completed"

    - name: Clean up ECR images
      run: |
        REPOSITORY_NAME="snake-game"
        
        echo "Checking ECR repository: $REPOSITORY_NAME"
        
        # Ê£ÄÊü•‰ªìÂ∫ìÊòØÂê¶Â≠òÂú®
        if aws ecr describe-repositories --repository-names $REPOSITORY_NAME --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
          echo "Cleaning up ECR repository: $REPOSITORY_NAME"
          
          # Ëé∑ÂèñÊâÄÊúâÈïúÂÉèdigest
          IMAGE_DIGESTS=$(aws ecr list-images --repository-name $REPOSITORY_NAME --region ${{ env.AWS_REGION }} --query 'imageIds[].imageDigest' --output text 2>/dev/null || echo "")
          
          if [ -n "$IMAGE_DIGESTS" ]; then
            for digest in $IMAGE_DIGESTS; do
              echo "Deleting image: $digest"
              aws ecr batch-delete-image \
                --repository-name $REPOSITORY_NAME \
                --image-ids imageDigest=$digest \
                --region ${{ env.AWS_REGION }}
            done
            echo "Deleted all images from ECR repository"
          else
            echo "No images found in ECR repository"
          fi
        else
          echo "ECR repository $REPOSITORY_NAME does not exist"
        fi

    - name: Clean up CloudWatch log groups
      run: |
        echo "Checking for CloudWatch log groups..."
        
        # Âà†Èô§‰∏éÈ°πÁõÆÁõ∏ÂÖ≥ÁöÑCloudWatchÊó•ÂøóÁªÑ
        LOG_GROUPS=$(aws logs describe-log-groups --log-group-name-prefix "/ecs/snake-game" --query 'logGroups[].logGroupName' --output text 2>/dev/null || echo "")
        
        if [ -n "$LOG_GROUPS" ]; then
          echo "Deleting CloudWatch log groups"
          for LOG_GROUP in $LOG_GROUPS; do
            echo "Deleting log group: $LOG_GROUP"
            aws logs delete-log-group --log-group-name $LOG_GROUP || echo "Failed to delete log group: $LOG_GROUP (may already be deleted)"
          done
          echo "CloudWatch log groups cleanup completed"
        else
          echo "No CloudWatch log groups found"
        fi

    - name: Send destruction notification
      run: |
        echo "‚úÖ Infrastructure for environment '${{ github.event.inputs.environment }}' has been destroyed successfully"
        echo ""
        echo "üìù Cleanup Summary:"
        echo "   - Terraform resources: ‚úÖ Destroyed"
        echo "   - ECS services: ${{ steps.check-ecs.outputs.service_exists == 'true' && '‚úÖ Stopped and deleted' || '‚è≠Ô∏è  Did not exist' }}"
        echo "   - ECS task definitions: ${{ steps.check-ecs.outputs.cluster_exists == 'true' && '‚úÖ Deregistered' || '‚è≠Ô∏è  Did not exist' }}"
        echo "   - ECR images: ‚úÖ Cleaned up"
        echo "   - CloudWatch logs: ‚úÖ Deleted"
        echo ""
        echo "‚ö†Ô∏è  Note: The following resources may need manual cleanup:"
        echo "   - S3 state bucket: snake-game-terraform-state"
        echo "   - IAM roles (if not managed by Terraform)"
        echo "   - SSM parameters (if not managed by Terraform)"